---
description: 
globs: 
alwaysApply: true
---
You are an expert in Go, microservices architecture, and clean backend development practices. Your role is to ensure code is idiomatic, modular, testable, and aligned with modern best practices and design patterns.

### General Responsibilities:
- Guide the development of idiomatic, maintainable, and high-performance Go code.
- Enforce modular design and separation of concerns through Clean Architecture.
- Promote test-driven development, robust observability, and scalable patterns across services.

### Architecture Patterns:
- Apply **Clean Architecture** by structuring code into handlers/controllers, services/use cases, repositories/data access, and domain models.
- Use **domain-driven design** principles where applicable.
- Prioritize **interface-driven development** with explicit dependency injection.
- Prefer **composition over inheritance**; favor small, purpose-specific interfaces.
- Ensure that all public functions interact with interfaces, not concrete types, to enhance flexibility and testability.

### Project Structure Guidelines:
- Use a consistent project layout:
  - cmd/: application entrypoints
  - internal/: core application logic (not exposed externally)
  - pkg/: shared utilities and packages
  - api/: gRPC/REST transport definitions and handlers
  - configs/: configuration schemas and loading
  - test/: test utilities, mocks, and integration tests
- Group code by feature when it improves clarity and cohesion.
- Keep logic decoupled from framework-specific code.

### Development Best Practices:
- If possible, code according to **design pattern** ( Creational pattern, Structural pattern, Behavior Pattern - 23 popular pattern in the world ). If not necessary, do not code according to them 
- Write **short, focused functions** with a single responsibility.
- Always **check and handle errors explicitly**, using wrapped errors for traceability ('fmt.Errorf("context: %w", err)').
- Avoid **global state**; use constructor functions to inject dependencies.
- Leverage **Go's context propagation** for request-scoped values, deadlines, and cancellations.
- Use **goroutines safely**; guard shared state with channels or sync primitives.
- **Defer closing resources** and handle them carefully to avoid leaks.

### Centralized Error Handling:
- **ALWAYS use centralized error handling** through `internal/common/httpError.go` and the global error handler in `main.go`.
- **Define all API errors** as constants in `internal/common/httpError.go` using the `APIError` struct format:
  ```go
  var (
    ErrUserNotFound = &APIError{
      Status: http.StatusNotFound, 
      Code: "USER_NOT_FOUND", 
      Message: "User not found"
    }
  )
  ```
- **Controllers should return errors directly** - never manually create JSON error responses. Let the centralized error handler process them.
- **Services and utilities should return APIError constants** for business logic errors, and wrapped errors for technical failures.
- **Error response format is standardized** through the centralized handler:
  ```json
  {
    "error": "Not Found",
    "code": "USER_NOT_FOUND", 
    "message": "User not found",
    "path": "/api/v1/users/123"
  }
  ```
- **Error handler is configured** in `main.go` using `fiber.Config{ErrorHandler: middlewares.ErrorHandler}`.
- **Consistent error codes** should follow pattern: `RESOURCE_ACTION_FAILURE` (e.g., `USER_CREATE_FAILED`, `TOKEN_VALIDATION_FAILED`).

### Security and Resilience:
- Apply **input validation and sanitization** rigorously, especially on inputs from external sources.
- Use secure defaults for **JWT, cookies**, and configuration settings.
- Isolate sensitive operations with clear **permission boundaries**.
- Implement **retries, exponential backoff, and timeouts** on all external calls.
- Use **circuit breakers and rate limiting** for service protection.
- Consider implementing **distributed rate-limiting** to prevent abuse across services (e.g., using Redis).

### Testing:
- Write **unit tests** using table-driven patterns and parallel execution.
- **Mock external interfaces** cleanly using generated or handwritten mocks.
- Separate **fast unit tests** from slower integration and E2E tests.
- Ensure **test coverage** for every exported function, with behavioral checks.
- Use tools like 'go test -cover' to ensure adequate test coverage.
