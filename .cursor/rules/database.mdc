- when you design a table you must ensure that I have the following default columns: version, status, creator_id, modifier_id, deleted_at (default 0 ), created_at, updated_at
- When you write a model you must ensure that each column is commented with full meaning
- When you design a column name always use a prefix for that column name. Ex: table account -> acc_id, acc_name...
- When you design model to save data don't use UUID but use BigInt
- Always follow the 3NF rule
- **JSON Serialization for Complex Types in GORM Models**: When using complex types (struct, map[string]interface{}, custom types) in GORM model fields that will be stored as JSON in MySQL, you MUST implement `sql.Scanner` and `driver.Valuer` interfaces to avoid "unsupported type" errors. Example:
  ```go
  // Custom type for JSON storage
  type CustomJSONType map[string]interface{}
  
  // Scan implements sql.Scanner interface for reading from database
  func (c *CustomJSONType) Scan(value interface{}) error {
      if value == nil {
          *c = make(CustomJSONType)
          return nil
      }
      var bytes []byte
      switch v := value.(type) {
      case []byte:
          bytes = v
      case string:
          bytes = []byte(v)
      default:
          return fmt.Errorf("cannot scan %T into CustomJSONType", value)
      }
      if len(bytes) == 0 {
          *c = make(CustomJSONType)
          return nil
      }
      return json.Unmarshal(bytes, c)
  }
  
  // Value implements driver.Valuer interface for writing to database
  func (c CustomJSONType) Value() (driver.Value, error) {
      return json.Marshal(c)
  }
  ```